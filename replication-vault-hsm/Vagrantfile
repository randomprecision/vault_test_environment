# -*- mode: ruby -*-
# vi: set ft=ruby :

# This Vagrantfile spins up two Vault server nodes (with Consul client and SoftHSM) and two Consul server nodes. Meant to be used to reproduce replication with Vault+prem.hsm.

# Option to specify a Consul & Vault version.
CONSUL_VERSION = ENV['CONSUL_VERSION'] || "1.11.2"
VAULT_VERSION = ENV['VAULT_VERSION'] || "1.9.3"

# This will pull your AWS credentials from the host environment into the VM environments (used to download Vault enterprise binaries from S3).
AWS_ACCESS_KEY_ID = ENV['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = ENV['AWS_SECRET_ACCESS_KEY']

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.usable_port_range = 4200..4220
  config.vm.network "forwarded_port", guest: 8200, host: 8220, protocol: "tcp",
  auto_correct: true
  config.vm.network "forwarded_port", guest: 8250, host: 2250, protocol: "tcp",
  auto_correct: true
 
# Install Consul on all 4 VMs
  config.vm.box = "debian/stretch64"

# Vault server VMs                        
  config.vm.define "vault_primary" do |vault_primary|
      vault_primary.vm.hostname = "vault-primary"
      vault_primary.vm.network "private_network", ip: "172.20.20.10"
      vault_primary.vm.provision "shell", 
          path: "scripts/vault_setup.sh",
          env: {"VAULT_VERSION" => VAULT_VERSION,
                "AWS_ACCESS_KEY_ID" => AWS_ACCESS_KEY_ID,
                "AWS_SECRET_ACCESS_KEY" => AWS_SECRET_ACCESS_KEY,
                 "CONSUL_VERSION" => CONSUL_VERSION,
                 "CONSUL_NODE" => "primary_consul_client",
                  "VAULT_ADDR" => "http://127.0.0.1:8200"}
#     config.vm.network :forwarded_port, guest: 8200, host: 4200, protocol: "tcp"
#     config.vm.network :forwarded_port, guest: 8520, host: 4250, protocol: "tcp" 
  end

  config.vm.define "vault_secondary" do |vault_secondary|
      vault_secondary.vm.hostname = "vault-secondary"
      vault_secondary.vm.network "private_network", ip: "172.20.20.11"
      vault_secondary.vm.provision "shell", 
          path: "scripts/vault_setup.sh",
          env: {"VAULT_VERSION" => VAULT_VERSION,
                "AWS_ACCESS_KEY_ID" => AWS_ACCESS_KEY_ID,
                "AWS_SECRET_ACCESS_KEY" => AWS_SECRET_ACCESS_KEY,
                "CONSUL_VERSION" => CONSUL_VERSION,
                "CONSUL_NODE" => "secondary_consul_client",
                "VAULT_ADDR" => "http://127.0.0.1:8200"}
#      config.vm.network :forwarded_port, guest: 8200, host: 4220, protocol: "tcp"
#      config.vm.network :forwarded_port, guest: 8250, host: 4255, protocol: "tcp"
 
  end

# Consul server VMs
  config.vm.define "consul_server_primary" do |consul_server_primary|
      consul_server_primary.vm.hostname = "consul-server-primary"
      consul_server_primary.vm.network "private_network", ip: "172.20.20.12"
      consul_server_primary.vm.provision "shell",
          path: "scripts/consul_setup.sh",
          env: {"CONSUL_VERSION" => CONSUL_VERSION, 
                "CONSUL_NODE" => "primary_consul_server"}
 
  end

    config.vm.define "consul_server_secondary" do |consul_server_secondary|
      consul_server_secondary.vm.hostname = "consul-server-secondary"
      consul_server_secondary.vm.network "private_network", ip: "172.20.20.13"
      consul_server_secondary.vm.provision "shell",
          path: "scripts/consul_setup.sh",
          env: {"CONSUL_VERSION" => CONSUL_VERSION,
                "CONSUL_NODE" => "secondary_consul_server"}

  end

end
 
